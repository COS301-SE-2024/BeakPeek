// Mocks generated by Mockito 5.4.4 from annotations
// in beakpeek/test/lifelistprovider/life_list_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:beakpeek/Controller/DB/life_list_provider.dart' as _i3;
import 'package:beakpeek/Model/bird.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LifeListProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockLifeListProvider extends _i1.Mock implements _i3.LifeListProvider {
  MockLifeListProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i4.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#database),
        )),
      ) as _i4.Future<_i2.Database>);

  @override
  _i4.Future<void> insertBird(_i5.Bird? bird) => (super.noSuchMethod(
        Invocation.method(
          #insertBird,
          [bird],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.Bird>> fetchLifeList() => (super.noSuchMethod(
        Invocation.method(
          #fetchLifeList,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Bird>>.value(<_i5.Bird>[]),
      ) as _i4.Future<List<_i5.Bird>>);

  @override
  _i4.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Future<bool> isDuplicate(_i5.Bird? bird) => (super.noSuchMethod(
        Invocation.method(
          #isDuplicate,
          [bird],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> delete(_i5.Bird? bird) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [bird],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
