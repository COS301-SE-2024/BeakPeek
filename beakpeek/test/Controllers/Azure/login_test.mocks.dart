// Mocks generated by Mockito 5.4.4 from annotations
// in beakpeek/test/Azure/login_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:beakpeek/Model/UserProfile/achievement.dart' as _i10;
import 'package:beakpeek/Model/UserProfile/achievment_list.dart' as _i9;
import 'package:beakpeek/Model/UserProfile/user_achievment.dart' as _i8;
import 'package:beakpeek/Model/UserProfile/user_model.dart' as _i6;
import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i2;
import 'package:flutter/src/widgets/notification_listener.dart' as _i5;
import 'package:localstorage/localstorage.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWidget_0 extends _i1.SmartFake implements _i2.Widget {
  _FakeWidget_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_1 extends _i1.SmartFake
    implements _i2.InheritedWidget {
  _FakeInheritedWidget_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_2 extends _i1.SmartFake
    implements _i3.DiagnosticsNode {
  _FakeDiagnosticsNode_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i3.TextTreeConfiguration? parentConfiguration,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [LocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorage extends _i1.Mock implements _i4.LocalStorage {
  MockLocalStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  String? key(int? index) => (super.noSuchMethod(Invocation.method(
        #key,
        [index],
      )) as String?);

  @override
  String? getItem(String? key) => (super.noSuchMethod(Invocation.method(
        #getItem,
        [key],
      )) as String?);

  @override
  void removeItem(String? key) => super.noSuchMethod(
        Invocation.method(
          #removeItem,
          [key],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setItem(
    String? key,
    String? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setItem,
          [
            key,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i2.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_0(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i2.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
      ) as bool);

  @override
  _i2.InheritedWidget dependOnInheritedElement(
    _i2.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_1(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i2.InheritedWidget);

  @override
  void visitAncestorElements(_i2.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i2.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i5.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.DiagnosticsNode describeElement(
    String? name, {
    _i3.DiagnosticsTreeStyle? style = _i3.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i3.DiagnosticsNode);

  @override
  _i3.DiagnosticsNode describeWidget(
    String? name, {
    _i3.DiagnosticsTreeStyle? style = _i3.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i3.DiagnosticsNode);

  @override
  List<_i3.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i3.DiagnosticsNode>[],
      ) as List<_i3.DiagnosticsNode>);

  @override
  _i3.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i3.DiagnosticsNode);
}

/// A class which mocks [UserModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserModel extends _i1.Mock implements _i6.UserModel {
  MockUserModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get username => (super.noSuchMethod(
        Invocation.getter(#username),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#username),
        ),
      ) as String);

  @override
  set username(String? _username) => super.noSuchMethod(
        Invocation.setter(
          #username,
          _username,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get email => (super.noSuchMethod(
        Invocation.getter(#email),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#email),
        ),
      ) as String);

  @override
  set email(String? _email) => super.noSuchMethod(
        Invocation.setter(
          #email,
          _email,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get profilepicture => (super.noSuchMethod(
        Invocation.getter(#profilepicture),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#profilepicture),
        ),
      ) as String);

  @override
  set profilepicture(String? _profilepicture) => super.noSuchMethod(
        Invocation.setter(
          #profilepicture,
          _profilepicture,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i8.UserAchievement> get achievements => (super.noSuchMethod(
        Invocation.getter(#achievements),
        returnValue: <_i8.UserAchievement>[],
      ) as List<_i8.UserAchievement>);

  @override
  set achievements(List<_i8.UserAchievement>? _achievements) =>
      super.noSuchMethod(
        Invocation.setter(
          #achievements,
          _achievements,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get description => (super.noSuchMethod(
        Invocation.getter(#description),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#description),
        ),
      ) as String);

  @override
  set description(String? _description) => super.noSuchMethod(
        Invocation.setter(
          #description,
          _description,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get level => (super.noSuchMethod(
        Invocation.getter(#level),
        returnValue: 0,
      ) as int);

  @override
  set level(int? _level) => super.noSuchMethod(
        Invocation.setter(
          #level,
          _level,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get xp => (super.noSuchMethod(
        Invocation.getter(#xp),
        returnValue: 0,
      ) as int);

  @override
  set xp(int? _xp) => super.noSuchMethod(
        Invocation.setter(
          #xp,
          _xp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get lifelist => (super.noSuchMethod(
        Invocation.getter(#lifelist),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#lifelist),
        ),
      ) as String);

  @override
  set lifelist(String? _lifelist) => super.noSuchMethod(
        Invocation.setter(
          #lifelist,
          _lifelist,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get highscore => (super.noSuchMethod(
        Invocation.getter(#highscore),
        returnValue: 0,
      ) as int);

  @override
  set highscore(int? _highscore) => super.noSuchMethod(
        Invocation.setter(
          #highscore,
          _highscore,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  dynamic get(String? propertyName) => super.noSuchMethod(Invocation.method(
        #get,
        [propertyName],
      ));

  @override
  void set(
    String? propertyName,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #set,
          [
            propertyName,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #toJson,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [AchievementList].
///
/// See the documentation for Mockito's code generation for more information.
class MockAchievementList extends _i1.Mock implements _i9.AchievementList {
  MockAchievementList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i10.Achievement> get achievements => (super.noSuchMethod(
        Invocation.getter(#achievements),
        returnValue: <_i10.Achievement>[],
      ) as List<_i10.Achievement>);

  @override
  set achievements(List<_i10.Achievement>? _achievements) => super.noSuchMethod(
        Invocation.setter(
          #achievements,
          _achievements,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  String toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #toJson,
            [],
          ),
        ),
      ) as String);
}
