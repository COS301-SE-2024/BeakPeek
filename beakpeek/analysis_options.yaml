# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes  # Uncomment to enable the `prefer_single_quotes` rule
    - avoid_print # discourage using print statements
    - prefer_const_constructors 
    - prefer_const_literals_to_create_immutables # Use const for immutable collections
    - prefer_final_locals # Prefer final for local variables if they are not reassigned
    - prefer_single_quotes # Prefer single quotes for strings
    - annotate_overrides # Require @override for overridden methods
    - always_declare_return_types # Always declare return types for methods and functions
    - always_put_control_body_on_new_line # Control flow statements should have bodies on new lines
    - always_use_package_imports # Use package imports for other files in the same package
    - avoid_as # Avoid using `as` for type casts
    - avoid_empty_else # Avoid empty else statements
    - avoid_function_literals_in_foreach_calls # Avoid using function literals in forEach calls
    - avoid_redundant_argument_values # Avoid passing redundant arguments
    - avoid_types_on_closure_parameters # Avoid specifying types for closure parameters
    - curly_braces_in_flow_control_structures # Use curly braces for all flow control structures
    - empty_constructor_bodies # Constructors with empty bodies should be replaced with a semicolon
    - implementation_imports # Avoid imports from implementation files
    - library_prefixes # Use library prefixes for imports
    - prefer_asserts_with_message # Use assert with messages
    - prefer_typing_uninitialized_variables # Prefer typing for uninitialized variables
    - slash_for_doc_comments # Use /// for documentation comments
    - type_annotate_public_apis # Type annotate public APIs
    - unnecessary_const # Remove unnecessary const
    - unnecessary_new # Remove unnecessary new
    - unnecessary_null_in_if_null_operators # Remove unnecessary null in if-null operators
    - lines_longer_than_80_chars
    - sort_constructors_first
    - sort_child_properties_last

# Override Flutter lints
analyzer:
  errors:
    avoid_print: warning # Set avoid_print as a warning instead of an error

# Exclude generated files from analysis
exclude:
  - '**/*.g.dart'
  - '**/*.freezed.dart'

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
